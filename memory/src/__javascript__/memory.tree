file: Module 
	body: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = rgb2hex
					ctx: Store 
			value: Attribute 
				value: Name 
					id: str = JS
					ctx: Load 
				attr: str = rgb2hex
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = color1
					ctx: Store 
			value: Call 
				func: Name 
					id: str = rgb2hex
					ctx: Load 
				args: list 
					element: Str 
						s: str = rgba(255,0,0,0)
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = color2
					ctx: Store 
			value: Call 
				func: Name 
					id: str = rgb2hex
					ctx: Load 
				args: list 
					element: Str 
						s: str = rgba(255,255,0,0)
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = color3
					ctx: Store 
			value: Call 
				func: Name 
					id: str = rgb2hex
					ctx: Load 
				args: list 
					element: Str 
						s: str = rgba(255,255,255,0)
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = color4
					ctx: Store 
			value: Call 
				func: Name 
					id: str = rgb2hex
					ctx: Load 
				args: list 
					element: Str 
						s: str = rgba(255,0,255,0)
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = color5
					ctx: Store 
			value: Call 
				func: Name 
					id: str = rgb2hex
					ctx: Load 
				args: list 
					element: Str 
						s: str = rgba(255,80,80,0)
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = color6
					ctx: Store 
			value: Call 
				func: Name 
					id: str = rgb2hex
					ctx: Load 
				args: list 
					element: Str 
						s: str = rgba(255,128,0,0)
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = color7
					ctx: Store 
			value: Call 
				func: Name 
					id: str = rgb2hex
					ctx: Load 
				args: list 
					element: Str 
						s: str = rgba(255,128,255,0)
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = color8
					ctx: Store 
			value: Call 
				func: Name 
					id: str = rgb2hex
					ctx: Load 
				args: list 
					element: Str 
						s: str = rgba(255,0,128,0)
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = colors
					ctx: Store 
			value: List 
				elts: list 
					element: Name 
						id: str = color1
						ctx: Load 
					element: Name 
						id: str = color2
						ctx: Load 
					element: Name 
						id: str = color3
						ctx: Load 
					element: Name 
						id: str = color4
						ctx: Load 
					element: Name 
						id: str = color5
						ctx: Load 
					element: Name 
						id: str = color6
						ctx: Load 
					element: Name 
						id: str = color7
						ctx: Load 
					element: Name 
						id: str = color8
						ctx: Load 
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = allcolors
					ctx: Store 
			value: ListComp 
				elt: Name 
					id: str = color
					ctx: Load 
				generators: list 
					element: comprehension 
						target: Name 
							id: str = tuplecolor
							ctx: Store 
						iter: Call 
							func: Name 
								id: str = zip
								ctx: Load 
							args: list 
								element: Name 
									id: str = colors
									ctx: Load 
								element: Name 
									id: str = colors
									ctx: Load 
							keywords: list 
						ifs: list 
					element: comprehension 
						target: Name 
							id: str = color
							ctx: Store 
						iter: Name 
							id: str = tuplecolor
							ctx: Load 
						ifs: list 
		element: Expr 
			value: Call 
				func: Attribute 
					value: Name 
						id: str = JS
						ctx: Load 
					attr: str = shuffle
					ctx: Load 
				args: list 
					element: Name 
						id: str = allcolors
						ctx: Load 
				keywords: list 
		element: FunctionDef 
			name: str = all
			args: arguments 
				args: list 
					element: arg 
						arg: str = iterable
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: For 
					target: Name 
						id: str = element
						ctx: Store 
					iter: Name 
						id: str = iterable
						ctx: Load 
					body: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Name 
									id: str = element
									ctx: Load 
							body: list 
								element: Return 
									value: NameConstant 
										value: bool = False
							orelse: list 
					orelse: list 
				element: Return 
					value: NameConstant 
						value: bool = True
			decorator_list: list 
			returns: NoneType = None
		element: ClassDef 
			name: str = Grid
			bases: list 
			keywords: list 
			body: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = game
								annotation: NoneType = None
							element: arg 
								arg: str = rows
								annotation: NoneType = None
							element: arg 
								arg: str = cols
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: Num 
								n: int = 4
							element: Num 
								n: int = 4
					body: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = offset
									ctx: Store 
							value: Num 
								n: int = 4
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = game
									ctx: Store 
							value: Name 
								id: str = game
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = rows
									ctx: Store 
							value: Name 
								id: str = rows
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = cols
									ctx: Store 
							value: Name 
								id: str = rows
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = ligs
									ctx: Store 
							value: ListComp 
								elt: ListComp 
									elt: Num 
										n: int = 0
									generators: list 
										element: comprehension 
											target: Name 
												id: str = i
												ctx: Store 
											iter: Call 
												func: Name 
													id: str = range
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = rows
														ctx: Load 
												keywords: list 
											ifs: list 
								generators: list 
									element: comprehension 
										target: Name 
											id: str = j
											ctx: Store 
										iter: Call 
											func: Name 
												id: str = range
												ctx: Load 
											args: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = cols
													ctx: Load 
											keywords: list 
										ifs: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = spr
									ctx: Store 
							value: ListComp 
								elt: ListComp 
									elt: Num 
										n: int = 0
									generators: list 
										element: comprehension 
											target: Name 
												id: str = i
												ctx: Store 
											iter: Call 
												func: Name 
													id: str = range
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = rows
														ctx: Load 
												keywords: list 
											ifs: list 
								generators: list 
									element: comprehension 
										target: Name 
											id: str = j
											ctx: Store 
										iter: Call 
											func: Name 
												id: str = range
												ctx: Load 
											args: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = cols
													ctx: Load 
											keywords: list 
										ifs: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = display
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = numcells
									ctx: Store 
							value: BinOp 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = rows
									ctx: Load 
								op: Mult 
								right: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = cols
									ctx: Load 
						element: Assign 
							targets: list 
								element: Name 
									id: str = cells
									ctx: Store 
							value: Call 
								func: Name 
									id: str = range
									ctx: Load 
								args: list 
									element: Num 
										n: int = 16
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = JS
										ctx: Load 
									attr: str = shuffle
									ctx: Load 
								args: list 
									element: Name 
										id: str = cells
										ctx: Load 
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = JS
										ctx: Load 
									attr: str = shuffle
									ctx: Load 
								args: list 
									element: Name 
										id: str = colors
										ctx: Load 
								keywords: list 
						element: For 
							target: Name 
								id: str = num
								ctx: Store 
							iter: Name 
								id: str = cells
								ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = color
											ctx: Store 
									value: Subscript 
										value: Name 
											id: str = allcolors
											ctx: Load 
										slice: Index 
											value: Name 
												id: str = num
												ctx: Load 
										ctx: Load 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = i
													ctx: Store 
												element: Name 
													id: str = j
													ctx: Store 
											ctx: Store 
									value: Tuple 
										elts: list 
											element: BinOp 
												left: Name 
													id: str = num
													ctx: Load 
												op: Mod 
												right: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = cols
													ctx: Load 
											element: BinOp 
												left: Name 
													id: str = num
													ctx: Load 
												op: FloorDiv 
												right: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = rows
													ctx: Load 
										ctx: Load 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = posx
													ctx: Store 
												element: Name 
													id: str = posy
													ctx: Store 
											ctx: Store 
									value: Tuple 
										elts: list 
											element: BinOp 
												left: Name 
													id: str = i
													ctx: Load 
												op: Mult 
												right: BinOp 
													left: Num 
														n: int = 128
													op: Add 
													right: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = offset
														ctx: Load 
											element: BinOp 
												left: Name 
													id: str = j
													ctx: Load 
												op: Mult 
												right: BinOp 
													left: Num 
														n: int = 128
													op: Add 
													right: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = offset
														ctx: Load 
										ctx: Load 
								element: Assign 
									targets: list 
										element: Name 
											id: str = sprite
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = game
												ctx: Load 
											attr: str = rectangle
											ctx: Load 
										args: list 
											element: Num 
												n: int = 128
											element: Num 
												n: int = 128
											element: Name 
												id: str = color
												ctx: Load 
										keywords: list 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = sprite
												ctx: Load 
											attr: str = x
											ctx: Store 
									value: Name 
										id: str = posx
										ctx: Load 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = sprite
												ctx: Load 
											attr: str = y
											ctx: Store 
									value: Name 
										id: str = posy
										ctx: Load 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = sprite
												ctx: Load 
											attr: str = num
											ctx: Store 
									value: Name 
										id: str = num
										ctx: Load 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = sprite
												ctx: Load 
											attr: str = content
											ctx: Store 
									value: Name 
										id: str = color
										ctx: Load 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = sprite
												ctx: Load 
											attr: str = showed
											ctx: Store 
									value: NameConstant 
										value: bool = False
								element: Assign 
									targets: list 
										element: Name 
											id: str = rectb
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = game
												ctx: Load 
											attr: str = rectangle
											ctx: Load 
										args: list 
											element: Num 
												n: int = 128
											element: Num 
												n: int = 128
											element: Str 
												s: str = blue
										keywords: list 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = rectb
												ctx: Load 
											attr: str = x
											ctx: Store 
									value: Name 
										id: str = posx
										ctx: Load 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = rectb
												ctx: Load 
											attr: str = y
											ctx: Store 
									value: Name 
										id: str = posy
										ctx: Load 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = rectb
												ctx: Load 
											attr: str = num
											ctx: Store 
									value: Name 
										id: str = num
										ctx: Load 
								element: Assign 
									targets: list 
										element: Subscript 
											value: Subscript 
												value: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = ligs
													ctx: Load 
												slice: Index 
													value: Name 
														id: str = i
														ctx: Load 
												ctx: Load 
											slice: Index 
												value: Name 
													id: str = j
													ctx: Load 
											ctx: Store 
									value: Name 
										id: str = rectb
										ctx: Load 
								element: Assign 
									targets: list 
										element: Subscript 
											value: Subscript 
												value: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = spr
													ctx: Load 
												slice: Index 
													value: Name 
														id: str = i
														ctx: Load 
												ctx: Load 
											slice: Index 
												value: Name 
													id: str = j
													ctx: Load 
											ctx: Store 
									value: Name 
										id: str = sprite
										ctx: Load 
							orelse: list 
					decorator_list: list 
					returns: NoneType = None
			decorator_list: list 
		element: ClassDef 
			name: str = Memory
			bases: list 
			keywords: list 
			body: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = width
								annotation: NoneType = None
							element: arg 
								arg: str = height
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: Num 
								n: int = 512
							element: Num 
								n: int = 512
					body: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = game
									ctx: Store 
							value: Call 
								func: Name 
									id: str = hexi
									ctx: Load 
								args: list 
									element: Name 
										id: str = width
										ctx: Load 
									element: Name 
										id: str = height
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = setup
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = game
										ctx: Load 
									attr: str = backgroundColor
									ctx: Store 
							value: Str 
								s: str = seagrean
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = mouse
									ctx: Store 
							value: Attribute 
								value: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = game
									ctx: Load 
								attr: str = pointer
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = mouse
										ctx: Load 
									attr: str = tap
									ctx: Store 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = tap
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = grid
									ctx: Store 
							value: Call 
								func: Name 
									id: str = Grid
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = game
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = curcell
									ctx: Store 
							value: NameConstant 
								value: NoneType = None
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = clickedcells
									ctx: Store 
							value: List 
								elts: list 
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = tap
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = tapped
									ctx: Store 
							value: NameConstant 
								value: bool = True
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = setup
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = game
										ctx: Load 
									attr: str = scaleToWindow
									ctx: Load 
								args: list 
									element: Str 
										s: str = seaGreen
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = grid
										ctx: Load 
									attr: str = display
									ctx: Load 
								args: list 
								keywords: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = game
										ctx: Load 
									attr: str = state
									ctx: Store 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = play
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = get_curcell
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: For 
							target: Name 
								id: str = i
								ctx: Store 
							iter: Call 
								func: Name 
									id: str = range
									ctx: Load 
								args: list 
									element: Attribute 
										value: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = grid
											ctx: Load 
										attr: str = rows
										ctx: Load 
								keywords: list 
							body: list 
								element: For 
									target: Name 
										id: str = j
										ctx: Store 
									iter: Call 
										func: Name 
											id: str = range
											ctx: Load 
										args: list 
											element: Attribute 
												value: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = grid
													ctx: Load 
												attr: str = cols
												ctx: Load 
										keywords: list 
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = curcell
													ctx: Store 
											value: Subscript 
												value: Subscript 
													value: Attribute 
														value: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = grid
															ctx: Load 
														attr: str = ligs
														ctx: Load 
													slice: Index 
														value: Name 
															id: str = i
															ctx: Load 
													ctx: Load 
												slice: Index 
													value: Name 
														id: str = j
														ctx: Load 
												ctx: Load 
										element: If 
											test: Call 
												func: Attribute 
													value: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = game
														ctx: Load 
													attr: str = hit
													ctx: Load 
												args: list 
													element: Attribute 
														value: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = game
															ctx: Load 
														attr: str = pointer
														ctx: Load 
													element: Name 
														id: str = curcell
														ctx: Load 
												keywords: list 
											body: list 
												element: Assign 
													targets: list 
														element: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = curcell
															ctx: Store 
													value: Name 
														id: str = curcell
														ctx: Load 
											orelse: list 
									orelse: list 
							orelse: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = compare_cells
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Compare 
								left: Call 
									func: Name 
										id: str = len
										ctx: Load 
									args: list 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = clickedcells
											ctx: Load 
									keywords: list 
								ops: list 
									element: Lt 
								comparators: list 
									element: Num 
										n: int = 2
							body: list 
								element: Return 
									value: NoneType = None
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = numrows
									ctx: Store 
							value: Attribute 
								value: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = grid
									ctx: Load 
								attr: str = rows
								ctx: Load 
						element: Assign 
							targets: list 
								element: Name 
									id: str = numcols
									ctx: Store 
							value: Attribute 
								value: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = grid
									ctx: Load 
								attr: str = cols
								ctx: Load 
						element: FunctionDef 
							name: str = resetcell
							args: arguments 
								args: list 
									element: arg 
										arg: str = cells
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: FunctionDef 
									name: str = _reset
									args: arguments 
										args: list 
										vararg: NoneType = None
										kwonlyargs: list 
										kw_defaults: list 
										kwarg: NoneType = None
										defaults: list 
									body: list 
										element: Assign 
											targets: list 
												element: Attribute 
													value: Subscript 
														value: Name 
															id: str = cells
															ctx: Load 
														slice: Index 
															value: Num 
																n: int = 0
														ctx: Load 
													attr: str = alpha
													ctx: Store 
											value: Num 
												n: int = 1
										element: Assign 
											targets: list 
												element: Attribute 
													value: Subscript 
														value: Name 
															id: str = cells
															ctx: Load 
														slice: Index 
															value: Num 
																n: int = 1
														ctx: Load 
													attr: str = alpha
													ctx: Store 
											value: Num 
												n: int = 1
										element: Assign 
											targets: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = clickedcells
													ctx: Store 
											value: List 
												elts: list 
												ctx: Load 
									decorator_list: list 
									returns: NoneType = None
								element: Return 
									value: Name 
										id: str = _reset
										ctx: Load 
							decorator_list: list 
							returns: NoneType = None
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = cella
											ctx: Store 
										element: Name 
											id: str = cellb
											ctx: Store 
									ctx: Store 
							value: Subscript 
								value: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = clickedcells
									ctx: Load 
								slice: Slice 
									lower: NoneType = None
									upper: Num 
										n: int = 2
									step: NoneType = None
								ctx: Load 
						element: If 
							test: Compare 
								left: Attribute 
									value: Name 
										id: str = cella
										ctx: Load 
									attr: str = num
									ctx: Load 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Attribute 
										value: Name 
											id: str = cellb
											ctx: Load 
										attr: str = num
										ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = icella
													ctx: Store 
												element: Name 
													id: str = jcella
													ctx: Store 
											ctx: Store 
									value: Tuple 
										elts: list 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = cella
														ctx: Load 
													attr: str = num
													ctx: Load 
												op: Mod 
												right: Name 
													id: str = numcols
													ctx: Load 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = cella
														ctx: Load 
													attr: str = num
													ctx: Load 
												op: FloorDiv 
												right: Name 
													id: str = numrows
													ctx: Load 
										ctx: Load 
								element: Assign 
									targets: list 
										element: Tuple 
											elts: list 
												element: Name 
													id: str = icellb
													ctx: Store 
												element: Name 
													id: str = jcellb
													ctx: Store 
											ctx: Store 
									value: Tuple 
										elts: list 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = cellb
														ctx: Load 
													attr: str = num
													ctx: Load 
												op: Mod 
												right: Name 
													id: str = numcols
													ctx: Load 
											element: BinOp 
												left: Attribute 
													value: Name 
														id: str = cellb
														ctx: Load 
													attr: str = num
													ctx: Load 
												op: FloorDiv 
												right: Name 
													id: str = numrows
													ctx: Load 
										ctx: Load 
								element: Assign 
									targets: list 
										element: Name 
											id: str = spritea
											ctx: Store 
									value: Subscript 
										value: Subscript 
											value: Attribute 
												value: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = grid
													ctx: Load 
												attr: str = spr
												ctx: Load 
											slice: Index 
												value: Name 
													id: str = icella
													ctx: Load 
											ctx: Load 
										slice: Index 
											value: Name 
												id: str = jcella
												ctx: Load 
										ctx: Load 
								element: Assign 
									targets: list 
										element: Name 
											id: str = spriteb
											ctx: Store 
									value: Subscript 
										value: Subscript 
											value: Attribute 
												value: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = grid
													ctx: Load 
												attr: str = spr
												ctx: Load 
											slice: Index 
												value: Name 
													id: str = icellb
													ctx: Load 
											ctx: Load 
										slice: Index 
											value: Name 
												id: str = jcellb
												ctx: Load 
										ctx: Load 
								element: Assign 
									targets: list 
										element: Name 
											id: str = contenta
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = spritea
											ctx: Load 
										attr: str = content
										ctx: Load 
								element: Assign 
									targets: list 
										element: Name 
											id: str = contentb
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = spriteb
											ctx: Load 
										attr: str = content
										ctx: Load 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = cellb
												ctx: Load 
											attr: str = alpha
											ctx: Store 
									value: Num 
										n: int = 0
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = cella
												ctx: Load 
											attr: str = alpha
											ctx: Store 
									value: Num 
										n: int = 0
								element: If 
									test: Compare 
										left: Name 
											id: str = contenta
											ctx: Load 
										ops: list 
											element: NotEq 
										comparators: list 
											element: Name 
												id: str = contentb
												ctx: Load 
									body: list 
										element: Expr 
											value: Call 
												func: Name 
													id: str = setTimeout
													ctx: Load 
												args: list 
													element: Call 
														func: Name 
															id: str = resetcell
															ctx: Load 
														args: list 
															element: List 
																elts: list 
																	element: Name 
																		id: str = cella
																		ctx: Load 
																	element: Name 
																		id: str = cellb
																		ctx: Load 
																ctx: Load 
														keywords: list 
													element: Num 
														n: int = 1000
												keywords: list 
									orelse: list 
										element: Assign 
											targets: list 
												element: Attribute 
													value: Name 
														id: str = spritea
														ctx: Load 
													attr: str = showed
													ctx: Store 
											value: NameConstant 
												value: bool = True
										element: Assign 
											targets: list 
												element: Attribute 
													value: Name 
														id: str = spriteb
														ctx: Load 
													attr: str = showed
													ctx: Store 
											value: NameConstant 
												value: bool = True
										element: Assign 
											targets: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = clickedcells
													ctx: Store 
											value: List 
												elts: list 
												ctx: Load 
							orelse: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = check_endgame
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = lst_spr
									ctx: Store 
							value: ListComp 
								elt: Name 
									id: str = sprite
									ctx: Load 
								generators: list 
									element: comprehension 
										target: Name 
											id: str = liste_sprites
											ctx: Store 
										iter: Attribute 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = grid
												ctx: Load 
											attr: str = spr
											ctx: Load 
										ifs: list 
									element: comprehension 
										target: Name 
											id: str = sprite
											ctx: Store 
										iter: Name 
											id: str = liste_sprites
											ctx: Load 
										ifs: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = showed_values
									ctx: Store 
							value: ListComp 
								elt: Attribute 
									value: Name 
										id: str = s
										ctx: Load 
									attr: str = showed
									ctx: Load 
								generators: list 
									element: comprehension 
										target: Name 
											id: str = s
											ctx: Store 
										iter: Name 
											id: str = lst_spr
											ctx: Load 
										ifs: list 
						element: If 
							test: Call 
								func: Name 
									id: str = all
									ctx: Load 
								args: list 
									element: Name 
										id: str = showed_values
										ctx: Load 
								keywords: list 
							body: list 
								element: For 
									target: Name 
										id: str = s
										ctx: Store 
									iter: Name 
										id: str = lst_spr
										ctx: Load 
									body: list 
										element: Assign 
											targets: list 
												element: Attribute 
													value: Name 
														id: str = s
														ctx: Load 
													attr: str = alpha
													ctx: Store 
											value: Num 
												n: int = 0
									orelse: list 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = game
												ctx: Load 
											attr: str = state
											ctx: Store 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = end
										ctx: Load 
							orelse: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = play
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = check_endgame
									ctx: Load 
								args: list 
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = get_curcell
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Attribute 
								value: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = mouse
									ctx: Load 
								attr: str = tapped
								ctx: Load 
							body: list 
								element: Expr 
									value: IfExp 
										test: Compare 
											left: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = curcell
												ctx: Load 
											ops: list 
												element: NotIn 
											comparators: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = clickedcells
													ctx: Load 
										body: Call 
											func: Attribute 
												value: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = clickedcells
													ctx: Load 
												attr: str = append
												ctx: Load 
											args: list 
												element: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = curcell
													ctx: Load 
											keywords: list 
										orelse: NameConstant 
											value: NoneType = None
								element: Assign 
									targets: list 
										element: Attribute 
											value: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = mouse
												ctx: Load 
											attr: str = tapped
											ctx: Store 
									value: NameConstant 
										value: bool = False
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = compare_cells
											ctx: Load 
										args: list 
										keywords: list 
							orelse: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = start
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = game
										ctx: Load 
									attr: str = start
									ctx: Load 
								args: list 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = end
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = console
										ctx: Load 
									attr: str = log
									ctx: Load 
								args: list 
									element: Str 
										s: str = END
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
			decorator_list: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = memory
					ctx: Store 
			value: Call 
				func: Name 
					id: str = Memory
					ctx: Load 
				args: list 
				keywords: list 
		element: Expr 
			value: Call 
				func: Attribute 
					value: Name 
						id: str = memory
						ctx: Load 
					attr: str = start
					ctx: Load 
				args: list 
				keywords: list 